{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nexport default function useIsDrawerOpen() {\n  var navigation = useNavigation();\n  var drawer = navigation;\n\n  while (drawer && drawer.dangerouslyGetState().type !== 'drawer') {\n    drawer = drawer.dangerouslyGetParent();\n  }\n\n  var _React$useState = React.useState(function () {\n    return drawer ? Boolean(drawer.dangerouslyGetState().history.find(function (it) {\n      return it.type === 'drawer';\n    })) : false;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isDrawerOpen = _React$useState2[0],\n      setIsDrawerOpen = _React$useState2[1];\n\n  React.useEffect(function () {\n    var unsubscribe = drawer.addListener('state', function (e) {\n      setIsDrawerOpen(Boolean(e.data.state.history.find(function (it) {\n        return it.type === 'drawer';\n      })));\n    });\n    return unsubscribe;\n  }, [drawer, isDrawerOpen]);\n  return isDrawerOpen;\n}","map":{"version":3,"sources":["useIsDrawerOpen.tsx"],"names":["navigation","useNavigation","drawer","React","Boolean","it","unsubscribe","e","setIsDrawerOpen"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,QAAA,0BAAA;AAMA,eAAe,SAAA,eAAA,GAA2B;AACxC,MAAMA,UAAU,GAAGC,aAAnB,EAAA;AAEA,MAAIC,MAAM,GAH8B,UAGxC;;AAIA,SAAOA,MAAM,IAAIA,MAAM,CAANA,mBAAAA,GAAAA,IAAAA,KAAjB,QAAA,EAAiE;AAC/DA,IAAAA,MAAM,GAAGA,MAAM,CAAfA,oBAASA,EAATA;AACD;;AATuC,wBAWAC,KAAK,CAALA,QAAAA,CAAe;AAAA,WACrDD,MAAM,GACFE,OAAO,CACLF,MAAM,CAANA,mBAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAA0CG,UAAAA,EAAE;AAAA,aAAIA,EAAE,CAAFA,IAAAA,KAFhD,QAE4C;AAAA,KAA5CH,CADK,CADL,GADR,KAAuD;AAAA,GAAfC,CAXA;AAAA;AAAA,MAWlC,YAXkC;AAAA,MAWlC,eAXkC;;AAmBxCA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMG,WAAW,GAAG,MAAM,CAAN,WAAA,CAAA,OAAA,EAA4BC,UAAAA,CAAC,EAAI;AACnDC,MAAAA,eAAe,CACbJ,OAAO,CAACG,CAAC,CAADA,IAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAA0BF,UAAAA,EAAE;AAAA,eAAIA,EAAE,CAAFA,IAAAA,KAD1CG,QACsC;AAAA,OAA5BD,CAAD,CADM,CAAfC;AADF,KAAoB,CAApB;AAMA,WAAA,WAAA;AAPFL,GAAAA,EAQG,CAAA,MAAA,EARHA,YAQG,CARHA;AAUA,SAAA,YAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { useNavigation, ParamListBase } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '../types';\n\n/**\n * Hook to detect if the drawer is open in a parent navigator.\n */\nexport default function useIsDrawerOpen() {\n  const navigation = useNavigation();\n\n  let drawer = navigation as DrawerNavigationProp<ParamListBase>;\n\n  // The screen might be inside another navigator such as stack nested in drawer\n  // We need to find the closest drawer navigator and add the listener there\n  while (drawer && drawer.dangerouslyGetState().type !== 'drawer') {\n    drawer = drawer.dangerouslyGetParent();\n  }\n\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(() =>\n    drawer\n      ? Boolean(\n          drawer.dangerouslyGetState().history.find(it => it.type === 'drawer')\n        )\n      : false\n  );\n\n  React.useEffect(() => {\n    const unsubscribe = drawer.addListener('state', e => {\n      setIsDrawerOpen(\n        Boolean(e.data.state.history.find(it => it.type === 'drawer'))\n      );\n    });\n\n    return unsubscribe;\n  }, [drawer, isDrawerOpen]);\n\n  return isDrawerOpen;\n}\n"]},"metadata":{},"sourceType":"module"}