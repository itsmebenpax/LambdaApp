{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nimport NavigationContext from \"./NavigationContext\";\nimport { PrivateValueStore } from \"./types\";\nPrivateValueStore;\nexport default function useNavigationHelpers(_ref) {\n  var onAction = _ref.onAction,\n      getState = _ref.getState,\n      emitter = _ref.emitter,\n      router = _ref.router;\n  var parentNavigationHelpers = React.useContext(NavigationContext);\n  return React.useMemo(function () {\n    var dispatch = function dispatch(action) {\n      var payload = typeof action === 'function' ? action(getState()) : action;\n      var handled = onAction(payload);\n\n      if (!handled && process.env.NODE_ENV !== 'production') {\n        console.error(\"The action '\".concat(payload.type, \"' with payload '\").concat(JSON.stringify(payload.payload), \"' was not handled by any navigator. If you are trying to navigate to a screen, check if the screen exists in your navigator. If you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/en/nesting-navigators.html#navigating-to-a-screen-in-a-nested-navigator.\"));\n      }\n    };\n\n    var actions = _objectSpread({}, router.actionCreators, {}, CommonActions);\n\n    var helpers = Object.keys(actions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(actions[name].apply(actions, arguments));\n      };\n\n      return acc;\n    }, {});\n    return _objectSpread({}, parentNavigationHelpers, {}, helpers, {\n      dispatch: dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers ? parentNavigationHelpers.isFocused : function () {\n        return true;\n      },\n      canGoBack: function canGoBack() {\n        var state = getState();\n        return router.getStateForAction(state, CommonActions.goBack(), {\n          routeNames: state.routeNames,\n          routeParamList: {}\n        }) !== null || (parentNavigationHelpers === null || parentNavigationHelpers === void 0 ? void 0 : parentNavigationHelpers.canGoBack()) || false;\n      }\n    });\n  }, [router, getState, parentNavigationHelpers, emitter.emit, onAction]);\n}","map":{"version":3,"sources":["useNavigationHelpers.tsx"],"names":["PrivateValueStore","router","parentNavigationHelpers","React","dispatch","action","payload","getState","handled","onAction","process","console","JSON","actions","helpers","acc","emit","emitter","isFocused","canGoBack","state","CommonActions","routeNames","routeParamList"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,QAAA,2BAAA;AAOA,OAAA,iBAAA;AAEA,SAAA,iBAAA;AAIAA,iBAAiB;AAgBjB,eAAe,SAAA,oBAAA,CAAA,IAAA,EAIoD;AAAA,MAAjE,QAAiE,GAAA,IAAA,CAAjE,QAAiE;AAAA,MAAjE,QAAiE,GAAA,IAAA,CAAjE,QAAiE;AAAA,MAAjE,OAAiE,GAAA,IAAA,CAAjE,OAAiE;AAAA,MAAlCC,MAAkC,GAAA,IAAA,CAAlCA,MAAkC;AACjE,MAAMC,uBAAuB,GAAGC,KAAK,CAALA,UAAAA,CAAhC,iBAAgCA,CAAhC;AAEA,SAAO,KAAK,CAAL,OAAA,CAAc,YAAM;AACzB,QAAMC,QAAQ,GAAIC,SAAZD,QAAYC,CAAAA,MAAD,EAAiD;AAChE,UAAMC,OAAO,GACX,OAAA,MAAA,KAAA,UAAA,GAA+BD,MAAM,CAACE,QAAtC,EAAqC,CAArC,GADF,MAAA;AAGA,UAAMC,OAAO,GAAGC,QAAQ,CAAxB,OAAwB,CAAxB;;AAEA,UAAI,CAAA,OAAA,IAAYC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAhB,YAAA,EAAuD;AACrDC,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,eAAAA,MAAAA,CACiBL,OAAO,CADxBK,IAAAA,EAAAA,kBAAAA,EAAAA,MAAAA,CACgDC,IAAI,CAAJA,SAAAA,CAC5CN,OAAO,CAFXK,OACgDC,CADhDD,EAAAA,4SAAAA,CAAAA;AAKD;AAZH,KAAA;;AAeA,QAAME,OAAO,GAAA,aAAA,CAAA,EAAA,EACRZ,MAAM,CADE,cAAA,EAAA,EAAA,EAAb,aAAa,CAAb;;AAKA,QAAMa,OAAO,GAAG,MAAM,CAAN,IAAA,CAAA,OAAA,EAAA,MAAA,CACd,UAAA,GAAA,EAAA,IAAA,EAAe;AAEbC,MAAAA,GAAG,CAAHA,IAAG,CAAHA,GAAY,YAAA;AAAA,eAAkBX,QAAQ,CAACS,OAAO,CAAPA,IAAO,CAAPA,OAAAA,OAAO,EAAlC,SAAkC,CAAR,CAA1B;AAAZE,OAAAA;;AACA,aAAA,GAAA;AAJY,KAAA,EAAhB,EAAgB,CAAhB;AASA,WAAA,aAAA,CAAA,EAAA,EAAA,uBAAA,EAAA,EAAA,EAAA,OAAA,EAAA;AAGEX,MAAAA,QAHF,EAGEA,QAHF;AAIEY,MAAAA,IAAI,EAAEC,OAAO,CAJf,IAAA;AAKEC,MAAAA,SAAS,EAAEhB,uBAAuB,GAC9BA,uBAAuB,CADO,SAAA,GAE9B;AAAA,eAPN,IAOM;AAAA,OAPN;AAQEiB,MAAAA,SAAS,EAAE,qBAAM;AACf,YAAMC,KAAK,GAAGb,QAAd,EAAA;AAEA,eACE,MAAM,CAAN,iBAAA,CAAA,KAAA,EAAgCc,aAAa,CAA7C,MAAgCA,EAAhC,EAAkE;AAChEC,UAAAA,UAAU,EAAEF,KAAK,CAD+C,UAAA;AAEhEG,UAAAA,cAAc,EAAE;AAFgD,SAAlE,MAAA,IAAA,KAIArB,uBAJA,KAAA,IAIAA,IAAAA,uBAJA,KAAA,KAAA,CAIAA,GAJA,KAAA,CAIAA,GAAAA,uBAAuB,CAJvB,SAIAA,EAJA,KADF,KAAA;AAQD;AAnBH,KAAA,CAAA;AA9BK,GAAA,EAoDJ,CAAA,MAAA,EAAA,QAAA,EAAA,uBAAA,EAA4Ce,OAAO,CAAnD,IAAA,EApDH,QAoDG,CApDI,CAAP;AAqDD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport NavigationContext from './NavigationContext';\nimport { NavigationEventEmitter } from './useEventEmitter';\nimport { NavigationHelpers, NavigationProp, PrivateValueStore } from './types';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype Options<State extends NavigationState, Action extends NavigationAction> = {\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  emitter: NavigationEventEmitter;\n  router: Router<State, Action>;\n};\n\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\nexport default function useNavigationHelpers<\n  State extends NavigationState,\n  Action extends NavigationAction,\n  EventMap extends Record<string, any>\n>({ onAction, getState, emitter, router }: Options<State, Action>) {\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n\n  return React.useMemo(() => {\n    const dispatch = (action: Action | ((state: State) => Action)) => {\n      const payload =\n        typeof action === 'function' ? action(getState()) : action;\n\n      const handled = onAction(payload);\n\n      if (!handled && process.env.NODE_ENV !== 'production') {\n        console.error(\n          `The action '${payload.type}' with payload '${JSON.stringify(\n            payload.payload\n          )}' was not handled by any navigator. If you are trying to navigate to a screen, check if the screen exists in your navigator. If you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/en/nesting-navigators.html#navigating-to-a-screen-in-a-nested-navigator.`\n        );\n      }\n    };\n\n    const actions = {\n      ...router.actionCreators,\n      ...CommonActions,\n    };\n\n    const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n      (acc, name) => {\n        // @ts-ignore\n        acc[name] = (...args: any) => dispatch(actions[name](...args));\n        return acc;\n      },\n      {}\n    );\n\n    return {\n      ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers\n        ? parentNavigationHelpers.isFocused\n        : () => true,\n      canGoBack: () => {\n        const state = getState();\n\n        return (\n          router.getStateForAction(state, CommonActions.goBack() as Action, {\n            routeNames: state.routeNames,\n            routeParamList: {},\n          }) !== null ||\n          parentNavigationHelpers?.canGoBack() ||\n          false\n        );\n      },\n    } as NavigationHelpers<ParamListBase, EventMap> &\n      (NavigationProp<ParamListBase, string, any, any, any> | undefined);\n  }, [router, getState, parentNavigationHelpers, emitter.emit, onAction]);\n}\n"]},"metadata":{},"sourceType":"module"}